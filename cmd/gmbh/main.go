package main

import (
	"bufio"
	"bytes"
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"os/signal"
	"path/filepath"
	"runtime"
	"syscall"
	"time"

	"github.com/BurntSushi/toml"
	"github.com/gmbh-micro/config"
	"github.com/gmbh-micro/notify"
)

type launcher struct {
	config        *string
	noSD          *bool
	verbose       *bool
	verboseAll    *bool
	daemon        *bool
	managed       *bool
	maxRemoteSize *int
	noLog         *bool

	CoreServiceFName string
}

var l *launcher

func main() {

	// mode flags
	core := flag.Bool("core", false, "begin a gmbhCore instance; must specify a config file")

	// configuration flags
	l = &launcher{
		config:        flag.String("config", "", "a gmbh configuration file path"),
		noSD:          flag.Bool("no-service-discovery", false, "do not start managed services"),
		verbose:       flag.Bool("verbose", false, "Prints all Core data to stdout and stderr"),
		verboseAll:    flag.Bool("verbose-all", false, "print all output to stdout and stderr"),
		daemon:        flag.Bool("daemon", false, "for running the process manager in a container"),
		managed:       flag.Bool("managed", false, "for shutting down gmbh when it was started using the service launcher"),
		maxRemoteSize: flag.Int("max", 1, "This specifies the maximum number of servies per remote process manager"),
		noLog:         flag.Bool("no-log", false, "disable logging"),

		CoreServiceFName: ".core.service",
	}

	// cli reporting flags
	listAllFlag := flag.Bool("list", false, "list all processes")
	reportFlag := flag.Bool("report", false, "list all processes in report format")
	restartAllFlag := flag.Bool("restart", false, "restart all processes")
	listOneFlag := flag.String("list-one", "", "list all processes")
	restartOneFlag := flag.String("restart-one", "", "list all processes")
	shutdownFlag := flag.Bool("q", false, "shutdown gmbh")

	flag.Parse()

	if *core {
		startGmbh()
	} else if *listAllFlag {
		listAll()
	} else if *reportFlag {
		runReport()
	} else if *restartAllFlag {
		restartAll()
	} else if *listOneFlag != "" {
		listOne(*listOneFlag)
	} else if *restartOneFlag != "" {
		restartOne(*restartOneFlag)
	} else if *shutdownFlag {
		shutdown()
	} else {
		startGmbh()
	}
}

// startGmbh validates that things are installed, config files exist and the core service file
// has been generated,
//
// If all of these things hold true, the service launcher will start gmbh
func startGmbh() {

	notify.LnBCyanF("                    __                                                ")
	notify.LnBCyanF("  _  ._ _  |_  |_  (_   _  ._   o  _  _  |   _.     ._   _ |_   _  ._ ")
	notify.LnBCyanF(" (_| | | | |_) | | __) (/_ | \\/ | (_ (/_ |_ (_| |_| | | (_ | | (/_ |  ")
	notify.LnBCyanF("  _|                                                                  ")
	notify.LnBCyanF("Version=%s; Code=%s", config.Version, config.Code)

	// make sure that gmbhCore is installed
	installed := checkInstall()
	if !installed {
		notify.LnBRedF("gmbhCore or gmbhProcm does not seem to be installed")
		os.Exit(1)
	}

	if *l.config == "" {
		notify.LnBRedF("must specify a config file using the --config flag")
		os.Exit(1)
	}

	exists := fileExists(*l.config)
	if !exists {
		notify.LnBRedF("the specified config file does not seem to exist...")
		os.Exit(1)
	}

	if !fileExists(l.CoreServiceFName) {
		notify.LnBYellowF("Generating core service config file")
		genCoreServiceConfig()
	}

	launch()
}

// launch starts the process manager and launches the remote that holds the core using the
// .core.service file generated by genCoreService.
func launch() {

	var pmlog *os.File
	var datalog *os.File
	var err error

	pmCmd := exec.Command("gmbhProcm")
	gmbhCmd := exec.Command("gmbhProcm", "--remote", "--config=./"+l.CoreServiceFName)

	gmbhEnv := []string{
		"SERVICEMODE=managed",
	}

	// Both commands should print to os.Stdout
	if *l.verboseAll {
		pmCmd.Stdout = os.Stdout
		pmCmd.Stderr = os.Stderr
		pmCmd.Args = append(pmCmd.Args, "--verbose")

		gmbhCmd.Stdout = os.Stdout
		gmbhCmd.Stderr = os.Stderr
		gmbhCmd.Args = append(gmbhCmd.Args, "--verbose")

	} else if *l.verbose {
		// Only gmbhCore should print to os.StdOut

		pmlog, err = getLogFile("logs", "procm.log")
		if err == nil {
			notify.LnYellowF(filepath.Join(notify.Getpwd(), "logs", "procm.log"))
			pmCmd.Stdout = pmlog
			pmCmd.Stderr = pmlog
		}

		gmbhCmd.Stdout = os.Stdout
		gmbhCmd.Stderr = os.Stderr
		gmbhCmd.Args = append(gmbhCmd.Args, "--verbose")

	} else if !*l.noLog {
		// both files get logs
		pmlog, err = getLogFile("logs", "procm.log")
		if err == nil {
			notify.LnYellowF(filepath.Join(notify.Getpwd(), "logs", "procm.log"))
			pmCmd.Stdout = pmlog
			pmCmd.Stderr = pmlog
		} else {
			notify.LnRedF("could not create log file for procm; logging disabled")
		}
		datalog, err = getLogFile("logs", "data.log")
		if err == nil {
			notify.LnYellowF(filepath.Join(notify.Getpwd(), "logs", "core.log"))
			gmbhCmd.Stdout = datalog
			gmbhCmd.Stderr = datalog
		} else {
			notify.LnRedF("could not create log file for procm; logging disabled")
		}
		gmbhEnv = append(
			gmbhEnv,
			"REMOTELOG="+filepath.Join(basePath(*l.config), "logs", "core-remote.log"),
		)
	}

	pmCmd.Env = append(os.Environ(), "SERVICEMODE=managed")
	gmbhCmd.Env = append(os.Environ(), gmbhEnv...)

	err = pmCmd.Start()
	if err != nil {
		notify.LnBRedF("could not start gmbh-procm")
		return
	}
	err = gmbhCmd.Start()
	if err != nil {
		notify.LnBRedF("could not start gmbh-core-data")
		return
	}

	// if we are in daemon mode, and launching services, use a goroutine otherewise
	// launch it in the current thread
	if !*l.noSD && !*l.daemon {
		go serviceDiscovery()
	} else if !*l.noSD && *l.daemon {
		serviceDiscovery()
	}

	if !*l.daemon {
		sig := make(chan os.Signal, 1)
		signal.Notify(sig, syscall.SIGINT)

		_ = <-sig
		fmt.Println() //dead line to line up output

		// signal the processes
		notify.LnBBlueF("signaled sigusr1")
		pmCmd.Process.Signal(syscall.SIGUSR1)

		// shutdown the process manager
		time.Sleep(time.Second * 3)
		pmCmd.Process.Signal(syscall.SIGUSR2)
		pmCmd.Wait()
		notify.LnBYellowF("[cli] procm shutdown")

		// close the logs
		if pmlog != nil {
			pmlog.Close()
		}
		if datalog != nil {
			datalog.Close()
		}

		notify.LnBYellowF("[cli] shutdown complete")
	}

}

// servicediscovery parses the config that was passed in and if a services directory
// was specified, all subdirectories of it are scanned looking for a valid gmbhService
// config file.
//
// When one is found it is added to the list of services to launch and then launches
// then.
func serviceDiscovery() {
	coreConfig, err := config.ParseSystemConfig(*l.config)
	if err != nil {
		notify.LnBRedF("could not parse config; err=%s", err.Error())
		return
	}
	path := filepath.Join(basePath(*l.config), coreConfig.Services.ServicesDirectory)
	servicePaths, err := scanForServices(path)
	if err != nil {
		notify.LnBRedF("error scanning for services; err=%s", err.Error())
		return
	}

	limit := 1
	if *l.maxRemoteSize > limit {
		limit = *l.maxRemoteSize
	}

	confs := []string{}

	// Create and attach all services that run in Managed mode
	for _, servicePath := range servicePaths {

		static, err := config.ParseServiceStatic(servicePath)
		if err != nil {
			notify.LnBRedF("could not open config file")
			continue
		}

		if ok := static.Validate(); ok != nil {
			notify.LnBRedF("could not validate config file")
			continue
		}
		confs = append(confs, servicePath)
		if len(confs) == limit {
			launchService(confs, path, config.DefaultSystemCore.Address)
			confs = []string{}
		}
	}
	launchService(confs, path, config.DefaultSystemCore.Address)

}

// genCoreServiceConfig generates a service config for starting the core. This data is then saved to a file,
// .core.service in the directory where the gmbh instance is started from the command line
//
// All data related to starting the core from the service launcher should be configured here.
func genCoreServiceConfig() {
	Service := config.ServiceConfig{
		Static: &config.ServiceStatic{
			Name:     "CoreData",
			Language: "go",
			BinPath:  "gmbhCore",
			Args:     []string{"--config=" + *l.config, "--verbose"},
		},
	}
	dir := filepath.Dir(*l.config)
	coreServiceConfig := filepath.Join(dir, l.CoreServiceFName)
	buf := new(bytes.Buffer)
	if err := toml.NewEncoder(buf).Encode(Service); err != nil {
		log.Fatal(err)
	}
	f, err := os.Create(coreServiceConfig)
	if err != nil {
		log.Fatal(err)
	}
	w := bufio.NewWriter(f)
	_, err = w.Write(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	w.Flush()
	f.Close()
}

// getLogFile attempts to add the desired path as an extension to the current
// directory as reported by os.GetWd(). The file is then opened or created
// and returned
func getLogFile(desiredPathExt, filename string) (*os.File, error) {
	// get pwd
	dir, err := os.Getwd()
	if err != nil {
		notify.LnBRedF("getlogfile, pwd err=%s", err.Error())
		return nil, err
	}
	// make sure that the path extension exists or make the directories needed
	dirPath := filepath.Join(dir, desiredPathExt)
	if _, err := os.Stat(dirPath); os.IsNotExist(err) {
		os.Mkdir(dirPath, 0755)
	}
	// create the file
	filePath := filepath.Join(dirPath, filename)
	file, err := os.OpenFile(filePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		notify.LnBRedF("openfile err=%s", err.Error())
		return nil, err
	}
	return file, nil
}

func fileExists(path string) bool {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return false
	}
	return true
}

func checkInstall() bool {
	if runtime.GOOS == "darwin" {
		if _, err := os.Stat(config.ProcmBinPathMac); os.IsNotExist(err) {
			return false
		}
		if _, err := os.Stat(config.CoreBinPathMac); os.IsNotExist(err) {
			return false
		}
		return true
	} else if runtime.GOOS == "linux" {
		if _, err := os.Stat(config.ProcmBinPathLinux); os.IsNotExist(err) {
			return false
		}
		if _, err := os.Stat(config.CoreBinPathLinux); os.IsNotExist(err) {
			return false
		}
		notify.LnRedF("Linux support is incomplete")
		return true
	}
	notify.LnRedF(fmt.Sprintf("OS support not implemented for %s", runtime.GOOS))
	return false
}
